/* tslint:disable */
/* eslint-disable */
/**
 * POS Registry API - swagger UI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';

export interface FetchErrorsRequest {
    tokenUsername: string;
    tokenPassword: string;
    transId: number;
}

export interface FetchRegistryAfmRequest {
    tokenUsername: string;
    tokenPassword: string;
    tin: string;
    mid?: string;
    tid?: string;
    iban?: string;
}

export interface FetchUploadRequest {
    tokenUsername: string;
    tokenPassword: string;
    transId: number;
}

export interface FetchUploadedCsvRequest {
    tokenUsername: string;
    tokenPassword: string;
    transId: number;
}

export interface FetchUploadsRequest {
    tokenUsername: string;
    tokenPassword: string;
    dateFrom?: string;
    dateTo?: string;
    uploadType?: FetchUploadsUploadTypeEnum;
}

export interface UploadCsvRequest {
    tokenUsername: string;
    tokenPassword: string;
    file?: Blob;
}

export interface ValidateCsvRequest {
    tokenUsername: string;
    tokenPassword: string;
    file?: Blob;
}

/**
 * 
 */
export class ServicesForAcquirersApi extends runtime.BaseAPI {

    /**
     * Fetch errors for specific upload
     */
    async fetchErrorsRaw(requestParameters: FetchErrorsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['tokenUsername'] == null) {
            throw new runtime.RequiredError(
                'tokenUsername',
                'Required parameter "tokenUsername" was null or undefined when calling fetchErrors().'
            );
        }

        if (requestParameters['tokenPassword'] == null) {
            throw new runtime.RequiredError(
                'tokenPassword',
                'Required parameter "tokenPassword" was null or undefined when calling fetchErrors().'
            );
        }

        if (requestParameters['transId'] == null) {
            throw new runtime.RequiredError(
                'transId',
                'Required parameter "transId" was null or undefined when calling fetchErrors().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['tokenUsername'] != null) {
            headerParameters['tokenUsername'] = String(requestParameters['tokenUsername']);
        }

        if (requestParameters['tokenPassword'] != null) {
            headerParameters['tokenPassword'] = String(requestParameters['tokenPassword']);
        }

        const response = await this.request({
            path: `/rest/common/fetch/errors/{transId}`.replace(`{${"transId"}}`, encodeURIComponent(String(requestParameters['transId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Fetch errors for specific upload
     */
    async fetchErrors(requestParameters: FetchErrorsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.fetchErrorsRaw(requestParameters, initOverrides);
    }

    /**
     * Fetch submitted contracts for specific TIN
     */
    async fetchRegistryAfmRaw(requestParameters: FetchRegistryAfmRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['tokenUsername'] == null) {
            throw new runtime.RequiredError(
                'tokenUsername',
                'Required parameter "tokenUsername" was null or undefined when calling fetchRegistryAfm().'
            );
        }

        if (requestParameters['tokenPassword'] == null) {
            throw new runtime.RequiredError(
                'tokenPassword',
                'Required parameter "tokenPassword" was null or undefined when calling fetchRegistryAfm().'
            );
        }

        if (requestParameters['tin'] == null) {
            throw new runtime.RequiredError(
                'tin',
                'Required parameter "tin" was null or undefined when calling fetchRegistryAfm().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['mid'] != null) {
            queryParameters['mid'] = requestParameters['mid'];
        }

        if (requestParameters['tid'] != null) {
            queryParameters['tid'] = requestParameters['tid'];
        }

        if (requestParameters['iban'] != null) {
            queryParameters['iban'] = requestParameters['iban'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['tokenUsername'] != null) {
            headerParameters['tokenUsername'] = String(requestParameters['tokenUsername']);
        }

        if (requestParameters['tokenPassword'] != null) {
            headerParameters['tokenPassword'] = String(requestParameters['tokenPassword']);
        }

        const response = await this.request({
            path: `/rest/acquirer/fetch/contract/{tin}`.replace(`{${"tin"}}`, encodeURIComponent(String(requestParameters['tin']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Fetch submitted contracts for specific TIN
     */
    async fetchRegistryAfm(requestParameters: FetchRegistryAfmRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.fetchRegistryAfmRaw(requestParameters, initOverrides);
    }

    /**
     * Fetch info for specific upload
     */
    async fetchUploadRaw(requestParameters: FetchUploadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['tokenUsername'] == null) {
            throw new runtime.RequiredError(
                'tokenUsername',
                'Required parameter "tokenUsername" was null or undefined when calling fetchUpload().'
            );
        }

        if (requestParameters['tokenPassword'] == null) {
            throw new runtime.RequiredError(
                'tokenPassword',
                'Required parameter "tokenPassword" was null or undefined when calling fetchUpload().'
            );
        }

        if (requestParameters['transId'] == null) {
            throw new runtime.RequiredError(
                'transId',
                'Required parameter "transId" was null or undefined when calling fetchUpload().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['tokenUsername'] != null) {
            headerParameters['tokenUsername'] = String(requestParameters['tokenUsername']);
        }

        if (requestParameters['tokenPassword'] != null) {
            headerParameters['tokenPassword'] = String(requestParameters['tokenPassword']);
        }

        const response = await this.request({
            path: `/rest/common/fetch/upload/{transId}`.replace(`{${"transId"}}`, encodeURIComponent(String(requestParameters['transId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Fetch info for specific upload
     */
    async fetchUpload(requestParameters: FetchUploadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.fetchUploadRaw(requestParameters, initOverrides);
    }

    /**
     * Fetch uploaded file
     */
    async fetchUploadedCsvRaw(requestParameters: FetchUploadedCsvRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['tokenUsername'] == null) {
            throw new runtime.RequiredError(
                'tokenUsername',
                'Required parameter "tokenUsername" was null or undefined when calling fetchUploadedCsv().'
            );
        }

        if (requestParameters['tokenPassword'] == null) {
            throw new runtime.RequiredError(
                'tokenPassword',
                'Required parameter "tokenPassword" was null or undefined when calling fetchUploadedCsv().'
            );
        }

        if (requestParameters['transId'] == null) {
            throw new runtime.RequiredError(
                'transId',
                'Required parameter "transId" was null or undefined when calling fetchUploadedCsv().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['tokenUsername'] != null) {
            headerParameters['tokenUsername'] = String(requestParameters['tokenUsername']);
        }

        if (requestParameters['tokenPassword'] != null) {
            headerParameters['tokenPassword'] = String(requestParameters['tokenPassword']);
        }

        const response = await this.request({
            path: `/rest/common/fetch/csv/{transId}`.replace(`{${"transId"}}`, encodeURIComponent(String(requestParameters['transId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Fetch uploaded file
     */
    async fetchUploadedCsv(requestParameters: FetchUploadedCsvRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.fetchUploadedCsvRaw(requestParameters, initOverrides);
    }

    /**
     * Fetch list of uploaded files
     */
    async fetchUploadsRaw(requestParameters: FetchUploadsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['tokenUsername'] == null) {
            throw new runtime.RequiredError(
                'tokenUsername',
                'Required parameter "tokenUsername" was null or undefined when calling fetchUploads().'
            );
        }

        if (requestParameters['tokenPassword'] == null) {
            throw new runtime.RequiredError(
                'tokenPassword',
                'Required parameter "tokenPassword" was null or undefined when calling fetchUploads().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['dateFrom'] != null) {
            queryParameters['dateFrom'] = requestParameters['dateFrom'];
        }

        if (requestParameters['dateTo'] != null) {
            queryParameters['dateTo'] = requestParameters['dateTo'];
        }

        if (requestParameters['uploadType'] != null) {
            queryParameters['uploadType'] = requestParameters['uploadType'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['tokenUsername'] != null) {
            headerParameters['tokenUsername'] = String(requestParameters['tokenUsername']);
        }

        if (requestParameters['tokenPassword'] != null) {
            headerParameters['tokenPassword'] = String(requestParameters['tokenPassword']);
        }

        const response = await this.request({
            path: `/rest/common/fetch/uploads`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Fetch list of uploaded files
     */
    async fetchUploads(requestParameters: FetchUploadsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.fetchUploadsRaw(requestParameters, initOverrides);
    }

    /**
     * Upload CSV file 
     */
    async uploadCsvRaw(requestParameters: UploadCsvRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['tokenUsername'] == null) {
            throw new runtime.RequiredError(
                'tokenUsername',
                'Required parameter "tokenUsername" was null or undefined when calling uploadCsv().'
            );
        }

        if (requestParameters['tokenPassword'] == null) {
            throw new runtime.RequiredError(
                'tokenPassword',
                'Required parameter "tokenPassword" was null or undefined when calling uploadCsv().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['tokenUsername'] != null) {
            headerParameters['tokenUsername'] = String(requestParameters['tokenUsername']);
        }

        if (requestParameters['tokenPassword'] != null) {
            headerParameters['tokenPassword'] = String(requestParameters['tokenPassword']);
        }

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['file'] != null) {
            formParams.append('file', requestParameters['file'] as any);
        }

        const response = await this.request({
            path: `/rest/acquirer/upload/submit`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Upload CSV file 
     */
    async uploadCsv(requestParameters: UploadCsvRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.uploadCsvRaw(requestParameters, initOverrides);
    }

    /**
     * Validate CSV file 
     */
    async validateCsvRaw(requestParameters: ValidateCsvRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['tokenUsername'] == null) {
            throw new runtime.RequiredError(
                'tokenUsername',
                'Required parameter "tokenUsername" was null or undefined when calling validateCsv().'
            );
        }

        if (requestParameters['tokenPassword'] == null) {
            throw new runtime.RequiredError(
                'tokenPassword',
                'Required parameter "tokenPassword" was null or undefined when calling validateCsv().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['tokenUsername'] != null) {
            headerParameters['tokenUsername'] = String(requestParameters['tokenUsername']);
        }

        if (requestParameters['tokenPassword'] != null) {
            headerParameters['tokenPassword'] = String(requestParameters['tokenPassword']);
        }

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['file'] != null) {
            formParams.append('file', requestParameters['file'] as any);
        }

        const response = await this.request({
            path: `/rest/acquirer/upload/validate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Validate CSV file 
     */
    async validateCsv(requestParameters: ValidateCsvRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.validateCsvRaw(requestParameters, initOverrides);
    }

}

/**
 * @export
 */
export const FetchUploadsUploadTypeEnum = {
    AcquirerPos: 'ACQUIRER_POS',
    NspPos: 'NSP_POS'
} as const;
export type FetchUploadsUploadTypeEnum = typeof FetchUploadsUploadTypeEnum[keyof typeof FetchUploadsUploadTypeEnum];
