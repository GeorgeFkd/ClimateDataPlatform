/*
 * POS Registry API - swagger UI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.io.File;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ServicesForAcquirersApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ServicesForAcquirersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ServicesForAcquirersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for fetchErrors
     * @param tokenUsername  (required)
     * @param tokenPassword  (required)
     * @param transId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchErrorsCall(String tokenUsername, String tokenPassword, Long transId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/common/fetch/errors/{transId}"
            .replace("{" + "transId" + "}", localVarApiClient.escapeString(transId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tokenUsername != null) {
            localVarHeaderParams.put("tokenUsername", localVarApiClient.parameterToString(tokenUsername));
        }

        if (tokenPassword != null) {
            localVarHeaderParams.put("tokenPassword", localVarApiClient.parameterToString(tokenPassword));
        }

        final String[] localVarAccepts = {
            "application/xml",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchErrorsValidateBeforeCall(String tokenUsername, String tokenPassword, Long transId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tokenUsername' is set
        if (tokenUsername == null) {
            throw new ApiException("Missing the required parameter 'tokenUsername' when calling fetchErrors(Async)");
        }

        // verify the required parameter 'tokenPassword' is set
        if (tokenPassword == null) {
            throw new ApiException("Missing the required parameter 'tokenPassword' when calling fetchErrors(Async)");
        }

        // verify the required parameter 'transId' is set
        if (transId == null) {
            throw new ApiException("Missing the required parameter 'transId' when calling fetchErrors(Async)");
        }

        return fetchErrorsCall(tokenUsername, tokenPassword, transId, _callback);

    }

    /**
     * Fetch errors for specific upload
     * 
     * @param tokenUsername  (required)
     * @param tokenPassword  (required)
     * @param transId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
     </table>
     */
    public void fetchErrors(String tokenUsername, String tokenPassword, Long transId) throws ApiException {
        fetchErrorsWithHttpInfo(tokenUsername, tokenPassword, transId);
    }

    /**
     * Fetch errors for specific upload
     * 
     * @param tokenUsername  (required)
     * @param tokenPassword  (required)
     * @param transId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> fetchErrorsWithHttpInfo(String tokenUsername, String tokenPassword, Long transId) throws ApiException {
        okhttp3.Call localVarCall = fetchErrorsValidateBeforeCall(tokenUsername, tokenPassword, transId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Fetch errors for specific upload (asynchronously)
     * 
     * @param tokenUsername  (required)
     * @param tokenPassword  (required)
     * @param transId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchErrorsAsync(String tokenUsername, String tokenPassword, Long transId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchErrorsValidateBeforeCall(tokenUsername, tokenPassword, transId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchRegistryAfm
     * @param tokenUsername  (required)
     * @param tokenPassword  (required)
     * @param tin  (required)
     * @param mid  (optional)
     * @param tid  (optional)
     * @param iban  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchRegistryAfmCall(String tokenUsername, String tokenPassword, String tin, String mid, String tid, String iban, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/acquirer/fetch/contract/{tin}"
            .replace("{" + "tin" + "}", localVarApiClient.escapeString(tin.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (mid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mid", mid));
        }

        if (tid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tid", tid));
        }

        if (iban != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("iban", iban));
        }

        if (tokenUsername != null) {
            localVarHeaderParams.put("tokenUsername", localVarApiClient.parameterToString(tokenUsername));
        }

        if (tokenPassword != null) {
            localVarHeaderParams.put("tokenPassword", localVarApiClient.parameterToString(tokenPassword));
        }

        final String[] localVarAccepts = {
            "application/xml",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchRegistryAfmValidateBeforeCall(String tokenUsername, String tokenPassword, String tin, String mid, String tid, String iban, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tokenUsername' is set
        if (tokenUsername == null) {
            throw new ApiException("Missing the required parameter 'tokenUsername' when calling fetchRegistryAfm(Async)");
        }

        // verify the required parameter 'tokenPassword' is set
        if (tokenPassword == null) {
            throw new ApiException("Missing the required parameter 'tokenPassword' when calling fetchRegistryAfm(Async)");
        }

        // verify the required parameter 'tin' is set
        if (tin == null) {
            throw new ApiException("Missing the required parameter 'tin' when calling fetchRegistryAfm(Async)");
        }

        return fetchRegistryAfmCall(tokenUsername, tokenPassword, tin, mid, tid, iban, _callback);

    }

    /**
     * Fetch submitted contracts for specific TIN
     * 
     * @param tokenUsername  (required)
     * @param tokenPassword  (required)
     * @param tin  (required)
     * @param mid  (optional)
     * @param tid  (optional)
     * @param iban  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
     </table>
     */
    public void fetchRegistryAfm(String tokenUsername, String tokenPassword, String tin, String mid, String tid, String iban) throws ApiException {
        fetchRegistryAfmWithHttpInfo(tokenUsername, tokenPassword, tin, mid, tid, iban);
    }

    /**
     * Fetch submitted contracts for specific TIN
     * 
     * @param tokenUsername  (required)
     * @param tokenPassword  (required)
     * @param tin  (required)
     * @param mid  (optional)
     * @param tid  (optional)
     * @param iban  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> fetchRegistryAfmWithHttpInfo(String tokenUsername, String tokenPassword, String tin, String mid, String tid, String iban) throws ApiException {
        okhttp3.Call localVarCall = fetchRegistryAfmValidateBeforeCall(tokenUsername, tokenPassword, tin, mid, tid, iban, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Fetch submitted contracts for specific TIN (asynchronously)
     * 
     * @param tokenUsername  (required)
     * @param tokenPassword  (required)
     * @param tin  (required)
     * @param mid  (optional)
     * @param tid  (optional)
     * @param iban  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchRegistryAfmAsync(String tokenUsername, String tokenPassword, String tin, String mid, String tid, String iban, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchRegistryAfmValidateBeforeCall(tokenUsername, tokenPassword, tin, mid, tid, iban, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchUpload
     * @param tokenUsername  (required)
     * @param tokenPassword  (required)
     * @param transId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUploadCall(String tokenUsername, String tokenPassword, Long transId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/common/fetch/upload/{transId}"
            .replace("{" + "transId" + "}", localVarApiClient.escapeString(transId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tokenUsername != null) {
            localVarHeaderParams.put("tokenUsername", localVarApiClient.parameterToString(tokenUsername));
        }

        if (tokenPassword != null) {
            localVarHeaderParams.put("tokenPassword", localVarApiClient.parameterToString(tokenPassword));
        }

        final String[] localVarAccepts = {
            "application/xml",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchUploadValidateBeforeCall(String tokenUsername, String tokenPassword, Long transId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tokenUsername' is set
        if (tokenUsername == null) {
            throw new ApiException("Missing the required parameter 'tokenUsername' when calling fetchUpload(Async)");
        }

        // verify the required parameter 'tokenPassword' is set
        if (tokenPassword == null) {
            throw new ApiException("Missing the required parameter 'tokenPassword' when calling fetchUpload(Async)");
        }

        // verify the required parameter 'transId' is set
        if (transId == null) {
            throw new ApiException("Missing the required parameter 'transId' when calling fetchUpload(Async)");
        }

        return fetchUploadCall(tokenUsername, tokenPassword, transId, _callback);

    }

    /**
     * Fetch info for specific upload
     * 
     * @param tokenUsername  (required)
     * @param tokenPassword  (required)
     * @param transId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
     </table>
     */
    public void fetchUpload(String tokenUsername, String tokenPassword, Long transId) throws ApiException {
        fetchUploadWithHttpInfo(tokenUsername, tokenPassword, transId);
    }

    /**
     * Fetch info for specific upload
     * 
     * @param tokenUsername  (required)
     * @param tokenPassword  (required)
     * @param transId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> fetchUploadWithHttpInfo(String tokenUsername, String tokenPassword, Long transId) throws ApiException {
        okhttp3.Call localVarCall = fetchUploadValidateBeforeCall(tokenUsername, tokenPassword, transId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Fetch info for specific upload (asynchronously)
     * 
     * @param tokenUsername  (required)
     * @param tokenPassword  (required)
     * @param transId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUploadAsync(String tokenUsername, String tokenPassword, Long transId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchUploadValidateBeforeCall(tokenUsername, tokenPassword, transId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchUploadedCsv
     * @param tokenUsername  (required)
     * @param tokenPassword  (required)
     * @param transId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUploadedCsvCall(String tokenUsername, String tokenPassword, Long transId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/common/fetch/csv/{transId}"
            .replace("{" + "transId" + "}", localVarApiClient.escapeString(transId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tokenUsername != null) {
            localVarHeaderParams.put("tokenUsername", localVarApiClient.parameterToString(tokenUsername));
        }

        if (tokenPassword != null) {
            localVarHeaderParams.put("tokenPassword", localVarApiClient.parameterToString(tokenPassword));
        }

        final String[] localVarAccepts = {
            "application/xml",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchUploadedCsvValidateBeforeCall(String tokenUsername, String tokenPassword, Long transId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tokenUsername' is set
        if (tokenUsername == null) {
            throw new ApiException("Missing the required parameter 'tokenUsername' when calling fetchUploadedCsv(Async)");
        }

        // verify the required parameter 'tokenPassword' is set
        if (tokenPassword == null) {
            throw new ApiException("Missing the required parameter 'tokenPassword' when calling fetchUploadedCsv(Async)");
        }

        // verify the required parameter 'transId' is set
        if (transId == null) {
            throw new ApiException("Missing the required parameter 'transId' when calling fetchUploadedCsv(Async)");
        }

        return fetchUploadedCsvCall(tokenUsername, tokenPassword, transId, _callback);

    }

    /**
     * Fetch uploaded file
     * 
     * @param tokenUsername  (required)
     * @param tokenPassword  (required)
     * @param transId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
     </table>
     */
    public void fetchUploadedCsv(String tokenUsername, String tokenPassword, Long transId) throws ApiException {
        fetchUploadedCsvWithHttpInfo(tokenUsername, tokenPassword, transId);
    }

    /**
     * Fetch uploaded file
     * 
     * @param tokenUsername  (required)
     * @param tokenPassword  (required)
     * @param transId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> fetchUploadedCsvWithHttpInfo(String tokenUsername, String tokenPassword, Long transId) throws ApiException {
        okhttp3.Call localVarCall = fetchUploadedCsvValidateBeforeCall(tokenUsername, tokenPassword, transId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Fetch uploaded file (asynchronously)
     * 
     * @param tokenUsername  (required)
     * @param tokenPassword  (required)
     * @param transId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUploadedCsvAsync(String tokenUsername, String tokenPassword, Long transId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchUploadedCsvValidateBeforeCall(tokenUsername, tokenPassword, transId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchUploads
     * @param tokenUsername  (required)
     * @param tokenPassword  (required)
     * @param dateFrom Date must be in DDMMYYYY format (optional)
     * @param dateTo Date must be in DDMMYYYY format (optional)
     * @param uploadType  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUploadsCall(String tokenUsername, String tokenPassword, String dateFrom, String dateTo, String uploadType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/common/fetch/uploads";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dateFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dateFrom", dateFrom));
        }

        if (dateTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dateTo", dateTo));
        }

        if (uploadType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uploadType", uploadType));
        }

        if (tokenUsername != null) {
            localVarHeaderParams.put("tokenUsername", localVarApiClient.parameterToString(tokenUsername));
        }

        if (tokenPassword != null) {
            localVarHeaderParams.put("tokenPassword", localVarApiClient.parameterToString(tokenPassword));
        }

        final String[] localVarAccepts = {
            "application/xml",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchUploadsValidateBeforeCall(String tokenUsername, String tokenPassword, String dateFrom, String dateTo, String uploadType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tokenUsername' is set
        if (tokenUsername == null) {
            throw new ApiException("Missing the required parameter 'tokenUsername' when calling fetchUploads(Async)");
        }

        // verify the required parameter 'tokenPassword' is set
        if (tokenPassword == null) {
            throw new ApiException("Missing the required parameter 'tokenPassword' when calling fetchUploads(Async)");
        }

        return fetchUploadsCall(tokenUsername, tokenPassword, dateFrom, dateTo, uploadType, _callback);

    }

    /**
     * Fetch list of uploaded files
     * 
     * @param tokenUsername  (required)
     * @param tokenPassword  (required)
     * @param dateFrom Date must be in DDMMYYYY format (optional)
     * @param dateTo Date must be in DDMMYYYY format (optional)
     * @param uploadType  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
     </table>
     */
    public void fetchUploads(String tokenUsername, String tokenPassword, String dateFrom, String dateTo, String uploadType) throws ApiException {
        fetchUploadsWithHttpInfo(tokenUsername, tokenPassword, dateFrom, dateTo, uploadType);
    }

    /**
     * Fetch list of uploaded files
     * 
     * @param tokenUsername  (required)
     * @param tokenPassword  (required)
     * @param dateFrom Date must be in DDMMYYYY format (optional)
     * @param dateTo Date must be in DDMMYYYY format (optional)
     * @param uploadType  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> fetchUploadsWithHttpInfo(String tokenUsername, String tokenPassword, String dateFrom, String dateTo, String uploadType) throws ApiException {
        okhttp3.Call localVarCall = fetchUploadsValidateBeforeCall(tokenUsername, tokenPassword, dateFrom, dateTo, uploadType, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Fetch list of uploaded files (asynchronously)
     * 
     * @param tokenUsername  (required)
     * @param tokenPassword  (required)
     * @param dateFrom Date must be in DDMMYYYY format (optional)
     * @param dateTo Date must be in DDMMYYYY format (optional)
     * @param uploadType  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUploadsAsync(String tokenUsername, String tokenPassword, String dateFrom, String dateTo, String uploadType, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchUploadsValidateBeforeCall(tokenUsername, tokenPassword, dateFrom, dateTo, uploadType, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for uploadCsv
     * @param tokenUsername  (required)
     * @param tokenPassword  (required)
     * @param _file  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadCsvCall(String tokenUsername, String tokenPassword, File _file, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/acquirer/upload/submit";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        if (tokenUsername != null) {
            localVarHeaderParams.put("tokenUsername", localVarApiClient.parameterToString(tokenUsername));
        }

        if (tokenPassword != null) {
            localVarHeaderParams.put("tokenPassword", localVarApiClient.parameterToString(tokenPassword));
        }

        final String[] localVarAccepts = {
            "application/xml",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uploadCsvValidateBeforeCall(String tokenUsername, String tokenPassword, File _file, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tokenUsername' is set
        if (tokenUsername == null) {
            throw new ApiException("Missing the required parameter 'tokenUsername' when calling uploadCsv(Async)");
        }

        // verify the required parameter 'tokenPassword' is set
        if (tokenPassword == null) {
            throw new ApiException("Missing the required parameter 'tokenPassword' when calling uploadCsv(Async)");
        }

        return uploadCsvCall(tokenUsername, tokenPassword, _file, _callback);

    }

    /**
     * Upload CSV file 
     * 
     * @param tokenUsername  (required)
     * @param tokenPassword  (required)
     * @param _file  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
     </table>
     */
    public void uploadCsv(String tokenUsername, String tokenPassword, File _file) throws ApiException {
        uploadCsvWithHttpInfo(tokenUsername, tokenPassword, _file);
    }

    /**
     * Upload CSV file 
     * 
     * @param tokenUsername  (required)
     * @param tokenPassword  (required)
     * @param _file  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> uploadCsvWithHttpInfo(String tokenUsername, String tokenPassword, File _file) throws ApiException {
        okhttp3.Call localVarCall = uploadCsvValidateBeforeCall(tokenUsername, tokenPassword, _file, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Upload CSV file  (asynchronously)
     * 
     * @param tokenUsername  (required)
     * @param tokenPassword  (required)
     * @param _file  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadCsvAsync(String tokenUsername, String tokenPassword, File _file, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = uploadCsvValidateBeforeCall(tokenUsername, tokenPassword, _file, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for validateCsv
     * @param tokenUsername  (required)
     * @param tokenPassword  (required)
     * @param _file  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call validateCsvCall(String tokenUsername, String tokenPassword, File _file, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/acquirer/upload/validate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        if (tokenUsername != null) {
            localVarHeaderParams.put("tokenUsername", localVarApiClient.parameterToString(tokenUsername));
        }

        if (tokenPassword != null) {
            localVarHeaderParams.put("tokenPassword", localVarApiClient.parameterToString(tokenPassword));
        }

        final String[] localVarAccepts = {
            "application/xml",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call validateCsvValidateBeforeCall(String tokenUsername, String tokenPassword, File _file, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tokenUsername' is set
        if (tokenUsername == null) {
            throw new ApiException("Missing the required parameter 'tokenUsername' when calling validateCsv(Async)");
        }

        // verify the required parameter 'tokenPassword' is set
        if (tokenPassword == null) {
            throw new ApiException("Missing the required parameter 'tokenPassword' when calling validateCsv(Async)");
        }

        return validateCsvCall(tokenUsername, tokenPassword, _file, _callback);

    }

    /**
     * Validate CSV file 
     * 
     * @param tokenUsername  (required)
     * @param tokenPassword  (required)
     * @param _file  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
     </table>
     */
    public void validateCsv(String tokenUsername, String tokenPassword, File _file) throws ApiException {
        validateCsvWithHttpInfo(tokenUsername, tokenPassword, _file);
    }

    /**
     * Validate CSV file 
     * 
     * @param tokenUsername  (required)
     * @param tokenPassword  (required)
     * @param _file  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> validateCsvWithHttpInfo(String tokenUsername, String tokenPassword, File _file) throws ApiException {
        okhttp3.Call localVarCall = validateCsvValidateBeforeCall(tokenUsername, tokenPassword, _file, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Validate CSV file  (asynchronously)
     * 
     * @param tokenUsername  (required)
     * @param tokenPassword  (required)
     * @param _file  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call validateCsvAsync(String tokenUsername, String tokenPassword, File _file, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = validateCsvValidateBeforeCall(tokenUsername, tokenPassword, _file, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
